from flask import Flask, render_template, request, jsonify, after_this_request
from io import StringIO
from pulp import *
import pandas as pd
import numpy as np
import swatch
import base64


app = Flask(__name__)

def getColors (emotions):
    data = {'amusement': {'#e23dc2': 0.1019,  '#f080f1': 0.1118,  '#eda4b3': 0.1182,  '#eeb8e0': 0.0948,  '#dc2265': 0.1075,  '#f07723': 0.1065,  '#ebe049': 0.1028}, 'anger': {'#62202b': 0.1609,  '#9b1c45': 0.1009,  '#ac1011': 0.3363,  '#ef2119': 0.289,  '#c94949': 0.2435}, 'annoyance': {'#62202b': 0.1169,  '#9b1c45': 0.1044,  '#ac1011': 0.1749,  '#ef2119': 0.1723,  '#c94949': 0.1331,  '#f07723': 0.0828,  '#f9b308': 0.0923}, 'awe': {'#f080f1': 0.0559,  '#f07723': 0.0645,  '#ebe049': 0.051,  '#c9f1ec': 0.0634,  '#ada8ff': 0.0626}, 'boredom': {'#6e6c68': 0.2662,  '#838586': 0.2977,  '#a0a1a5': 0.2755,  '#282a36': 0.0757}, 'confusion': {'#e23dc2': 0.0508, '#e5914e': 0.0695, '#838586': 0.0613}, 'contempt': {'#9b1c45': 0.0605,  '#ac1011': 0.0809,  '#ef2119': 0.07,  '#c94949': 0.0627,  '#767928': 0.072,  '#070808': 0.0469}, 'contentment': {'#4290ac': 0.1585,  '#91a3cf': 0.1616,  '#204c6e': 0.1702,  '#40718f': 0.1513}, 'disappointment': {'#424326': 0.0997,  '#6e6c68': 0.1026,  '#838586': 0.0833,  '#a0a1a5': 0.0783,  '#282a36': 0.0695,  '#070808': 0.0797}, 'disgust': {'#ac1011': 0.0544,  '#424326': 0.1645,  '#465838': 0.1512,  '#767928': 0.283}, 'elation': {'#f080f1': 0.087,  '#eda4b3': 0.079,  '#e5914e': 0.096,  '#f9b308': 0.1168,  '#ebe049': 0.1286,  '#34b0f4': 0.1055,  '#8ce7f7': 0.1174,  '#c9f1ec': 0.093,  '#ada8ff': 0.0977}, 'embarrassment': {'#eda4b3': 0.0538,  '#ef2119': 0.0648,  '#c94949': 0.0569,  '#767928': 0.0658}, 'fear': {'#ac1011': 0.0644,  '#ef2119': 0.0601,  '#282a36': 0.1256,  '#070808': 0.1401}, 'grief': {'#6e6c68': 0.1547,  '#838586': 0.1014,  '#282a36': 0.1947,  '#070808': 0.2274}, 'happiness': {'#e23dc2': 0.1167,  '#f080f1': 0.1268,  '#eda4b3': 0.1232,  '#eeb8e0': 0.1623,  '#dc2265': 0.1403,  '#f9b308': 0.1321,  '#ebe049': 0.1314,  '#4290ac': 0.1112,  '#34b0f4': 0.1513,  '#8ce7f7': 0.1556}, 'interest': {'#9b1c45': 0.1135,  '#4290ac': 0.0951,  '#34b0f4': 0.0975,  '#8ce7f7': 0.1,  '#3fad41': 0.1455}, 'joy': {'#e23dc2': 0.1689,  '#f080f1': 0.1724,  '#eda4b3': 0.203,  '#eeb8e0': 0.1735,  '#dc2265': 0.1577,  '#f9b308': 0.1669,  '#ebe049': 0.2146,  '#34b0f4': 0.1315,  '#8ce7f7': 0.1571}, 'pride': {'#e23dc2': 0.1165,  '#f080f1': 0.0866,  '#eda4b3': 0.0844,  '#eeb8e0': 0.1262,  '#dc2265': 0.0799}, 'relief': {'#4290ac': 0.0958,  '#8ce7f7': 0.0869,  '#c9f1ec': 0.1041,  '#91a3cf': 0.1044,  '#40718f': 0.0764}, 'sadness': {'#91a3cf': 0.0868,  '#6e6c68': 0.1529,  '#838586': 0.1698,  '#a0a1a5': 0.1087,  '#204c6e': 0.1545,  '#40718f': 0.1576,  '#282a36': 0.1824,  '#070808': 0.1564}, 'serenity': {'#4290ac': 0.1934,  '#34b0f4': 0.1216,  '#8ce7f7': 0.1362,  '#c9f1ec': 0.2001,  '#91a3cf': 0.2302,  '#ada8ff': 0.1293,  '#465838': 0.151,  '#eee3e8': 0.1423,  '#204c6e': 0.2038,  '#40718f': 0.1849}, 'shame': {'#424326': 0.0758,  '#6e6c68': 0.0559,  '#282a36': 0.0701,  '#070808': 0.0563}, 'surprise': {'#e23dc2': 0.154,  '#f080f1': 0.1409,  '#dc2265': 0.119,  '#ef2119': 0.0983,  '#f07723': 0.1233,  '#ebe049': 0.0966}}
    ems = sorted(emotions)
    res = []
    for e in ems:
        ires = [e,[]]
        for c in data[e].keys():
            ires[1].append([c,data[e][c]])
        ires[1] =  sorted(ires[1], key = lambda x: x[1], reverse=True)
        res.append(ires)

    return(res)

def getSubList(item, lst):
    res = lst[:]
    res.remove(item)
    return(res)

def getForbiddenPairs(dE):
	data="""color,#e23dc2,#f080f1,#eda4b3,#eeb8e0,#62202b,#9b1c45,#ac1011,#dc2265,#ef2119,#c94949,#f07723,#e5914e,#f9b308,#ebe049,#4290ac,#34b0f4,#8ce7f7,#c9f1ec,#91a3cf,#ada8ff,#424326,#465838,#767928,#3fad41,#6e6c68,#838586,#a0a1a5,#eee3e8,#204c6e,#40718f,#282a36,#070808
#e23dc2,0,13.26,24.83,25.02,35.53,26.65,37.91,18.5,36.05,27.77,45.98,46.27,64.1,75.68,45.77,58.43,51.68,38.56,33.64,29.9,54.95,58.94,64.29,85.41,32.84,20.34,28.33,37.14,44.81,40.88,41.73,47.31
#f080f1,13.26,0,19.96,15.37,50.12,39.81,47.24,27.64,40.63,34.05,45.93,44.94,60.42,70.38,39.77,49.07,41.32,31.77,25.82,21.05,62.82,62.94,64.37,80.93,36.82,22.66,24.15,28.51,49.77,38.84,53.37,60.8
#eda4b3,24.83,19.96,0,10.83,51.61,38.83,40.37,25.4,29.99,25.52,28.89,26.26,38.62,46.25,50.21,49.15,53.11,37.98,29.77,27.47,56.69,53.93,45.5,58.58,33.82,26.21,22.9,20.09,56.66,47.78,59.84,65.7
#eeb8e0,25.02,15.37,10.83,0,58.25,44.49,48.28,32.08,39.07,34.26,38.26,35.48,46.28,52.24,44.84,46.81,43.02,32.22,25.26,21.16,61.82,58.04,52.43,61.54,36.78,27.55,22.44,16.95,56.16,45.12,65.79,73.06
#62202b,35.53,50.12,51.61,58.25,0,11.77,19.28,24.93,31.65,24.44,44.68,48.43,65.22,74.46,56.19,64.73,80.53,74.28,51.43,56.26,30.63,38.73,43.91,67.91,28.92,35.37,46.48,64.64,37.75,44.53,23.96,23.97
#9b1c45,26.65,39.81,38.83,44.49,11.77,0,16.68,13.86,25.42,16.67,40.39,43.22,58.79,70.01,58.85,66.14,75.03,65.24,47.57,48.38,37.24,44.42,49.32,75.32,27.73,30.55,40.63,52.36,43.05,47.34,30.29,30.51
#ac1011,37.91,47.24,40.37,48.28,19.28,16.68,0,21.06,14.94,13.46,29.82,34.23,48.13,61.38,59.61,64.67,66,63.04,50.19,53.04,34.59,42.22,42.35,70.33,28.63,33.76,41.16,52.42,46.13,49.22,35.46,37.14
#dc2265,18.5,27.64,25.4,32.08,24.93,13.86,21.06,0,20.43,11.66,33.57,35.56,53.17,65.92,60.38,64.64,70.91,58.36,41.7,40.05,45.16,50.89,52.85,78.25,28.94,26.34,32.3,40.92,49.47,50.66,39.69,41.24
#ef2119,36.05,40.63,29.99,39.07,31.65,25.42,14.94,20.43,0,10.72,17.15,22.38,38.2,53.78,59.88,61.47,59.31,55.06,44.97,46.92,42.64,48.14,43.92,70.24,30.82,31.37,34.07,41.84,52.02,51.72,44.98,48.44
#c94949,27.77,34.05,25.52,34.26,24.44,16.67,13.46,11.66,10.72,0,22.58,25.28,41.6,54.64,55.8,58.33,68.32,53.68,40.88,42,38.4,43.59,41.77,66.6,26.12,26.86,30.95,39.87,46.97,47.24,39.4,43.91
#f07723,45.98,45.93,28.89,38.26,44.68,40.39,29.82,33.57,17.15,22.58,0,7.1,20.79,36.59,47.73,54.64,50.7,44.88,42.59,46.96,45.18,46.5,34.61,54.69,32.36,30.32,30.11,34.82,55.84,50.02,53.46,57.25
#e5914e,46.27,44.94,26.26,35.48,48.43,43.22,34.23,35.56,22.38,25.28,7.1,0,15.99,29.78,44.99,50.27,45.73,39.5,39.76,44.67,46.23,44.75,30.54,46.9,31.45,28.37,26.92,30.26,56.21,47.71,55.87,60.05
#f9b308,64.1,60.42,38.62,46.28,65.22,58.79,48.13,53.17,38.2,41.6,20.79,15.99,0,16.94,50.59,58.11,45.45,37.18,46.25,54.32,54.35,48.89,30.89,40.23,38.97,34.98,32.24,33.06,67.48,55.29,69.93,72.94
#ebe049,75.68,70.38,46.25,52.24,74.46,70.01,61.38,65.92,53.78,54.64,36.59,29.78,16.94,0,51.88,60.14,41.39,31.26,54.33,60.2,57.64,49.96,31.68,29.67,42.82,37.76,34.62,32.69,71.69,58.56,78.44,86.12
#4290ac,45.77,39.77,50.21,44.84,56.19,58.85,59.61,60.38,59.88,55.8,47.73,44.99,50.59,51.88,0,13.25,24.01,29.76,17.27,24,38.79,34.07,39.87,40.12,23.71,18.44,21.23,41.02,24.68,11.79,37.8,45.25
#34b0f4,58.43,49.07,49.15,46.81,64.73,66.14,64.67,64.64,61.47,58.33,54.64,50.27,58.11,60.14,13.25,0,18.94,27.11,16.24,22.99,55.27,49.95,53.61,51.29,33.03,24.69,23.79,37.21,38.15,22.5,51.66,58.45
#8ce7f7,51.68,41.32,53.11,43.02,80.53,75.03,66,70.91,59.31,68.32,50.7,45.73,45.45,41.39,24.01,18.94,0,11.14,23.15,27.11,60.21,50.67,45.84,37.72,39.91,31.04,25.54,35.95,51.89,35.05,71.85,81.54
#c9f1ec,38.56,31.77,37.98,32.22,74.28,65.24,63.04,58.36,55.06,53.68,44.88,39.5,37.18,31.26,29.76,27.11,11.14,0,26.54,29.5,59.26,49.45,41.08,31.71,39.48,30.42,23.28,23.06,55.71,39.51,73.25,89.16
#91a3cf,33.64,25.82,29.77,25.26,51.43,47.57,50.19,41.7,44.97,40.88,42.59,39.76,46.25,54.33,17.27,16.24,23.15,26.54,0,6.88,50.24,44.89,47.4,44.7,26.99,18.17,14.12,24.39,36.63,22.33,45.99,55.15
#ada8ff,29.9,21.05,27.47,21.16,56.26,48.38,53.04,40.05,46.92,42,46.96,44.67,54.32,60.2,24,22.99,27.11,29.5,6.88,0,60.03,53,56.56,51.94,34.77,24.36,20.38,25.65,42.43,27.45,53.62,62.95
#424326,54.95,62.82,56.69,61.82,30.63,37.24,34.59,45.16,42.64,38.4,45.18,46.23,54.35,57.64,38.79,55.27,60.21,59.26,50.24,60.03,0,9.42,21.43,39.14,18.86,28.44,40.75,59.31,31.56,32.9,22.93,21.32
#465838,58.94,62.94,53.93,58.04,38.73,44.42,42.22,50.89,48.14,43.59,46.5,44.75,48.89,49.96,34.07,49.95,50.67,49.45,44.89,53,9.42,0,18.09,31.85,17.49,24.9,35.72,52.76,31.04,29.89,26.35,27.38
#767928,64.29,64.37,45.5,52.43,43.91,49.32,42.35,52.85,43.92,41.77,34.61,30.54,30.89,31.68,39.87,53.61,45.84,41.08,47.4,56.56,21.43,18.09,0,22.16,20.68,23.68,29.51,42.51,46.26,40.76,41.17,41.19
#3fad41,85.41,80.93,58.58,61.54,67.91,75.32,70.33,78.25,70.24,66.6,54.69,46.9,40.23,29.67,40.12,51.29,37.72,31.71,44.7,51.94,39.14,31.85,22.16,0,31.01,28.11,29.18,40.62,53.93,44.89,52.77,55.26
#6e6c68,32.84,36.82,33.82,36.78,28.92,27.73,28.63,28.94,30.82,26.12,32.36,31.45,38.97,42.82,23.71,33.03,39.91,39.48,26.99,34.77,18.86,17.49,20.68,31.01,0,10.25,19.69,36.48,23.33,19.15,24.34,31.56
#838586,20.34,22.66,26.21,27.55,35.37,30.55,33.76,26.34,31.37,26.86,30.32,28.37,34.98,37.76,18.44,24.69,31.04,30.42,18.17,24.36,28.44,24.9,23.68,28.11,10.25,0,9.61,27.58,27.64,18.69,32.61,40.61
#a0a1a5,28.33,24.15,22.9,22.44,46.48,40.63,41.16,32.3,34.07,30.95,30.11,26.92,32.24,34.62,21.23,23.79,25.54,23.28,14.12,20.38,40.75,35.72,29.51,29.18,19.69,9.61,0,18.46,38.59,25.27,44.48,52.25
#eee3e8,37.14,28.51,20.09,16.95,64.64,52.36,52.42,40.92,41.84,39.87,34.82,30.26,33.06,32.69,41.02,37.21,35.95,23.06,24.39,25.65,59.31,52.76,42.51,40.62,36.48,27.58,18.46,0,57.19,43.9,71.27,86.76
#204c6e,44.81,49.77,56.66,56.16,37.75,43.05,46.13,49.47,52.02,46.97,55.84,56.21,67.48,71.69,24.68,38.15,51.89,55.71,36.63,42.43,31.56,31.04,46.26,53.93,23.33,27.64,38.59,57.19,0,12.93,16.55,24.98
#40718f,40.88,38.84,47.78,45.12,44.53,47.34,49.22,50.66,51.72,47.24,50.02,47.71,55.29,58.56,11.79,22.5,35.05,39.51,22.33,27.45,32.9,29.89,40.76,44.89,19.15,18.69,25.27,43.9,12.93,0,26.54,35.02
#282a36,41.73,53.37,59.84,65.79,23.96,30.29,35.46,39.69,44.98,39.4,53.46,55.87,69.93,78.44,37.8,51.66,71.85,73.25,45.99,53.62,22.93,26.35,41.17,52.77,24.34,32.61,44.48,71.27,16.55,26.54,0,11.82
#070808,47.31,60.8,65.7,73.06,23.97,30.51,37.14,41.24,48.44,43.91,57.25,60.05,72.94,86.12,45.25,58.45,81.54,89.16,55.15,62.95,21.32,27.38,41.19,55.26,31.56,40.61,52.25,86.76,24.98,35.02,11.82,0"""
   
	df = pd.read_csv(StringIO(data), encoding='utf-8', sep=',')
	colors = list(df['color'])
	badPairs=[]
	for color in colors:
	    distances = df[color]
	    for d in distances:
	        if d<dE and d!=0:
	            ind = df.index[df[color]==d].tolist()[0]
	            pair = sorted([color,df['color'][ind]])
	            if pair not in badPairs:
	                badPairs.append(pair)

	return(badPairs)

def getBalancedWeights(df,coef=1):
    colors = list(df['color'])
    emo = list(df.columns)
    emo.remove('color')

    ndf = pd.DataFrame(columns = list(df.columns))

    for c in colors:
        ind = df.index[df['color'] == c].tolist()[0]
        ncdf = df.loc[:, df.columns!='color']
        row = ncdf.iloc[ind]
        nrow = [c]
        for e in emo:
            currW = row[e] 
            newW = currW - max(getSubList(currW,row.tolist()))
            nrow.append(newW)
        ndf.loc[len(ndf)] = nrow

    return(ndf)

def generatePalette(emotions,method,minColDist=0):
    
    data2 = """color,amusement,anger,annoyance,awe,boredom,confusion,contempt,contentment,disappointment,disgust,elation,embarrassment,fear,grief,happiness,interest,joy,pride,relief,sadness,serenity,shame,surprise
#e23dc2,0.1019,-9999,-9999,-9999,-9999,0.0508,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1167,-9999,0.1689,0.1165,-9999,-9999,-9999,-9999,0.154
#f080f1,0.1118,-9999,-9999,0.0559,-9999,-9999,-9999,-9999,-9999,-9999,0.087,-9999,-9999,-9999,0.1268,-9999,0.1724,0.0866,-9999,-9999,-9999,-9999,0.1409
#eda4b3,0.1182,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.079,0.0538,-9999,-9999,0.1232,-9999,0.203,0.0844,-9999,-9999,-9999,-9999,-9999
#eeb8e0,0.0948,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1623,-9999,0.1735,0.1262,-9999,-9999,-9999,-9999,-9999
#62202b,-9999,0.1609,0.1169,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999
#9b1c45,-9999,0.1009,0.1044,-9999,-9999,-9999,0.0605,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1135,-9999,-9999,-9999,-9999,-9999,-9999,-9999
#ac1011,-9999,0.3363,0.1749,-9999,-9999,-9999,0.0809,-9999,-9999,0.0544,-9999,-9999,0.0644,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999
#dc2265,0.1075,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1403,-9999,0.1577,0.0799,-9999,-9999,-9999,-9999,0.119
#ef2119,-9999,0.289,0.1723,-9999,-9999,-9999,0.07,-9999,-9999,-9999,-9999,0.0648,0.0601,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.0983
#c94949,-9999,0.2435,0.1331,-9999,-9999,-9999,0.0627,-9999,-9999,-9999,-9999,0.0569,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999
#f07723,0.1065,-9999,0.0828,0.0645,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1233
#e5914e,-9999,-9999,-9999,-9999,-9999,0.0695,-9999,-9999,-9999,-9999,0.096,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999
#f9b308,-9999,-9999,0.0923,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1168,-9999,-9999,-9999,0.1321,-9999,0.1669,-9999,-9999,-9999,-9999,-9999,-9999
#ebe049,0.1028,-9999,-9999,0.051,-9999,-9999,-9999,-9999,-9999,-9999,0.1286,-9999,-9999,-9999,0.1314,-9999,0.2146,-9999,-9999,-9999,-9999,-9999,0.0966
#4290ac,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1585,-9999,-9999,-9999,-9999,-9999,-9999,0.1112,0.0951,-9999,-9999,0.0958,-9999,0.1934,-9999,-9999
#34b0f4,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1055,-9999,-9999,-9999,0.1513,0.0975,0.1315,-9999,-9999,-9999,0.1216,-9999,-9999
#8ce7f7,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1174,-9999,-9999,-9999,0.1556,0.1,0.1571,-9999,0.0869,-9999,0.1362,-9999,-9999
#c9f1ec,-9999,-9999,-9999,0.0634,-9999,-9999,-9999,-9999,-9999,-9999,0.093,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1041,-9999,0.2001,-9999,-9999
#91a3cf,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1616,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1044,0.0868,0.2302,-9999,-9999
#ada8ff,-9999,-9999,-9999,0.0626,-9999,-9999,-9999,-9999,-9999,-9999,0.0977,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1293,-9999,-9999
#424326,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.0997,0.1645,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.0758,-9999
#465838,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1512,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.151,-9999,-9999
#767928,-9999,-9999,-9999,-9999,-9999,-9999,0.072,-9999,-9999,0.283,-9999,0.0658,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999
#3fad41,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1455,-9999,-9999,-9999,-9999,-9999,-9999,-9999
#6e6c68,-9999,-9999,-9999,-9999,0.2662,-9999,-9999,-9999,0.1026,-9999,-9999,-9999,-9999,0.1547,-9999,-9999,-9999,-9999,-9999,0.1529,-9999,0.0559,-9999
#838586,-9999,-9999,-9999,-9999,0.2977,0.0613,-9999,-9999,0.0833,-9999,-9999,-9999,-9999,0.1014,-9999,-9999,-9999,-9999,-9999,0.1698,-9999,-9999,-9999
#a0a1a5,-9999,-9999,-9999,-9999,0.2755,-9999,-9999,-9999,0.0783,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1087,-9999,-9999,-9999
#eee3e8,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1423,-9999,-9999
#204c6e,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1702,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1545,0.2038,-9999,-9999
#40718f,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.1513,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,-9999,0.0764,0.1576,0.1849,-9999,-9999
#282a36,-9999,-9999,-9999,-9999,0.0757,-9999,-9999,-9999,0.0695,-9999,-9999,-9999,0.1256,0.1947,-9999,-9999,-9999,-9999,-9999,0.1824,-9999,0.0701,-9999
#070808,-9999,-9999,-9999,-9999,-9999,-9999,0.0469,-9999,0.0797,-9999,-9999,-9999,0.1401,0.2274,-9999,-9999,-9999,-9999,-9999,0.1564,-9999,0.0563,-9999"""

    badPairs = getForbiddenPairs(minColDist) 
    rdf = pd.read_csv(StringIO(data2), encoding='utf-8', sep=',') #data for isolated method     
    
    if method == 'balanced' and len(emotions)>2: 
        df = getBalancedWeights(rdf) #data for balanced method
    else:
        df = rdf   
    colors = list(df['color'])
    emo = list(df.columns)
    emo.remove('color')
    
 
    emo = emotions
    weights = df[emo].to_numpy()
    prob = LpProblem("AssignmentProblem", LpMaximize)
   
    # Define Decision Variable
    # The weight data is made into a dictionary
    weights= makeDict([colors, emo], weights, 0)

    # Creates a list of tuples containing all the possible assignments
    assign = [(c, e) for c in colors for e in emo]
    
    # A dictionary called 'Vars' is created to contain the referenced variables
    vrs = LpVariable.dicts("", (colors, emo), 0, None, LpBinary)
    
    # Define Objective Function
    # The objective function is added to 'prob' first
    if len(method)<1:
      method='balanced'

    # if method =='isolated' or len(emo)<2:
    prob += (
        lpSum([vrs[c][e] * weights[c][e] for (c, e) in assign]),
        "Sum_of_Assignment_weights",
    )
    
    

    # Define the Constraints
    # There are row constraints. Each job(emo) can be assigned to only one employee(color).
    for e in emo:
        prob+= lpSum(vrs[c][e] for c in colors) == 1

    # There are column constraints. Each employee(color) can be assigned to only one job(emotion).
    for c in colors:
        prob+= lpSum(vrs[c][e] for e in emo) <= 1

    if len(badPairs)>0:    
        for p in badPairs:
            c1 = p[0]
            c2 = p[1]
            prob+= lpSum(vrs[c1][e] for e in emo)+lpSum(vrs[c2][e] for e in emo) <= 1


    # The problem is solved using PuLP's choice of Solver
    prob.solve()

    # Print the variables optimized value
    palette = ''
    for v in prob.variables():
        if v.varValue !=0:
            palette += v.name.strip('_').replace('_',',')+'\n'
            # print(v.name.strip('_').replace('_',','))
    return(palette)

def hexTofloatRGB(hex_code):
    if len(hex_code) == 4:
        hex_code = "#" + hex_code[1]*2 + hex_code[2]*2 + hex_code[3]*2
    hex_code = hex_code.lstrip('#')
    return tuple(round(int(hex_code[i:i+2], 16)/255, 3) for i in (0, 2, 4))

def getColorsforAse (palette):
	clrs  = []
	

	for col in palette:
		colCode = col.split(',')[0]
		emo 	= col.split(',')[1]
		cdata = {
			'data': {
				'mode': u'RGB',
			    'values': [0.0, 0.0, 0.0]},
		 	'name': u'Joy',
		    'type': u'Global'}

		cdata['data']['values'] = hexTofloatRGB(colCode)
		cdata['name'] = emo

		clrs.append(cdata)

	return clrs




@app.route('/')
def index():
    return render_template('index.html', active='home')

@app.route('/about')
def about():
    return render_template('about.html', active='about')

@app.route('/hello', methods=['GET', 'POST'])
def hello():
    @after_this_request
    def add_header(response):
        response.headers.add('Access-Control-Allow-Origin', '*')
        return response

    # GET request
    if request.method == 'GET':
        message = {'greeting':'Hello from Flask!'}
        return jsonify(message)  # serialize and use JSON headers
        # emotions = request.form.getlist('emo')
        # return jsonify(emotions)
        # return render_template("index.html")
    # POST request
    if request.method == 'POST':
        # content_type = request.headers.get('Content-Type')
        emotions = request.form.getlist('emo')
        dE =  int(request.form['dE'])

        isolated = generatePalette(emotions,'isolated',dE).rstrip('\n').split('\n')
        balanced = generatePalette(emotions,'balanced',dE).rstrip('\n').split('\n')

        isoS = sorted(isolated, key = lambda x: x.split(',')[1])
        balS = sorted(balanced, key = lambda x: x.split(',')[1])
        
        aseIbts = swatch.dumps(getColorsforAse(isoS))
        aseBbts = swatch.dumps(getColorsforAse(balS))

        aseIObj = [base64.b64encode(aseIbts).decode('ascii')]
        aseBObj = [base64.b64encode(aseBbts).decode('ascii')]
        
        ase = [aseIObj, aseBObj]

        colors = getColors(emotions)
      
            
        return jsonify([isoS,balS,colors,dE, ase])


if __name__ == '__main__':
    app.run(debug = True)
    # app.run()


